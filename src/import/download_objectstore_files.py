"""
We use the objectstore to get the grondexploitatie files
"""
import os
import logging

import datetime

from dateutil import parser

import objectstore

log = logging.getLogger('objectstore')

assert os.getenv('GRONDEXPLOITATIE_OBJECTSTORE_PASSWORD')
DATA_DIR = os.getenv('GRONDEXPLOITATIE_DATA_DIR', 'data/')

OBJECTSTORE = dict(
    VERSION='2.0',
    AUTHURL='https://identity.stack.cloudvps.com/v2.0',
    TENANT_NAME='BGE000081 grondexploitaties',
    TENANT_ID='b487b9a7e7394e4b8ae78e21c21f3be9',
    USER=os.getenv('OBJECTSTORE_USER', 'grondexpl'),
    PASSWORD=os.getenv('GRONDEXPLOITATIE_OBJECTSTORE_PASSWORD'),
    REGION_NAME='NL',
)

EXPECTED_FILES = [
    'Mappingbestand rapportage kosten baten v2.csv',
    'dump-panos-4-12-2017.xlsx',
#    'grex_grenzen.tgz',
    'grex_grenzen20180320.tgz',
]

logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("swiftclient").setLevel(logging.WARNING)


grondexploitatie_conn = objectstore.get_connection(OBJECTSTORE)


def download_files(file_list):
    """Download the latest data. """
    for _, source_data_file in file_list:
        sql_gz_name = source_data_file['name'].split('/')[-1]
        msg = 'Downloading: %s' % sql_gz_name
        log.debug(msg)

        new_data = objectstore.get_object(
            grondexploitatie_conn, source_data_file, 'grondexploitatie')

        # save output to file!
        with open('{}{}'.format(DATA_DIR, sql_gz_name), 'wb') as outputzip:
            outputzip.write(new_data)


def get_grondexploitatie_files():
    """
    Download the grondexploitatie files
    """
    file_list = []

    meta_data = objectstore.get_full_container_list(
        grondexploitatie_conn, 'grondexploitatie')

    for o_info in meta_data:
        for expected_file in EXPECTED_FILES:
            if not o_info['name'].endswith(expected_file):
                continue

            dt = parser.parse(o_info['last_modified'])
            now = datetime.datetime.now()

            delta = now - dt

            log.debug('AGE: %d %s', delta.days, expected_file)

            if delta.days > 180:
                log.error('DELEVERY IMPORTED FILES ARE TOO OLD!')
                raise ValueError

            log.debug('%s %s', expected_file, dt)
            file_list.append((dt, o_info))

    download_files(file_list)


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    get_grondexploitatie_files()
