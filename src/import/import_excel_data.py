import logging
import time
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy import MetaData
from grondexploitatie.settings import DATABASES, DATA_DIR


log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(levelname)s - %(message)s")
handler.setFormatter(formatter)
log.addHandler(handler)

start = time.time()

database = DATABASES['default']
dbname = database['NAME']
user = database['USER']
password = database['PASSWORD']
host = database['HOST']
port = database['PORT']

db_engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{dbname}')
metadata = MetaData()
metadata.reflect(bind=db_engine)


def read_replace_excel_table(database, metadata, filename, tablename, sheet_number=0):
    sheet = pd.ExcelFile(filename)
    log.debug("Sheet names : {}".format(sheet.sheet_names))

    # Load a sheet into a DataFrame by name: df1
    df1 = sheet.parse(sheet.sheet_names[0])
    df1.rename(columns=lambda x: x.lower(), inplace=True)

    if tablename in metadata.tables:
        table = metadata.tables[tablename]
        table.drop(database)

    df1.to_sql(tablename, database)
    total_seconds = time.time() - start
    log.info("Imported {} {} items in {:.2f} seconds".format(len(df1.index), tablename, total_seconds))


planex_file = '{}dump-panos-4-12-2017.xlsx'.format(DATA_DIR)
planex_name = 'planex'

read_replace_excel_table(db_engine, metadata, planex_file, planex_name)

# Read in rapportage kosten & baten mappings from CSV file
start = time.time()
mapping_rapportage_file = '{}Mappingbestand rapportage kosten baten v2.csv'.format(DATA_DIR)
mapping_rapportage_name = 'mapping_rapportage'

log.debug("CSV file : {}".format(mapping_rapportage_file))
df = pd.read_csv(mapping_rapportage_file)
df.rename(columns=lambda x: x.lower(), inplace=True)

if mapping_rapportage_name in metadata.tables:
    table = metadata.tables[mapping_rapportage_name]
    table.drop(db_engine)

df.to_sql(mapping_rapportage_name, db_engine)
total_seconds = time.time() - start
log.info("Imported {} {} items in {:.2f} seconds".format(len(df.index), mapping_rapportage_name, total_seconds))
