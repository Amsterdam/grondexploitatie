import logging
import time
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy import MetaData
from sqlalchemy.types import Integer, Text, Float, BigInteger
from grondexploitatie.settings import DATABASES, DATA_DIR


log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(levelname)s - %(message)s")
handler.setFormatter(formatter)
log.addHandler(handler)

start = time.time()

database = DATABASES['default']
dbname = database['NAME']
user = database['USER']
password = database['PASSWORD']
host = database['HOST']
port = database['PORT']

db_engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{dbname}')
metadata = MetaData()
metadata.reflect(bind=db_engine)

planex_dtype = {
    'org_onderdeel': Text(),
    'project_code': Text(),
    'project_naam': Text(),
    'fonds': Text(),
    'fase': Text(),
    'begroting_naam': Text(),
    'label': Text(),
    'prijspeildatum': Text(),
    'boekingen_bijgewerkt_tot': Text(),
    'definitief_vastgesteld': Text(),
    'kosten_baten': Text(),
    'hoofdpost': Text(),
    'cataloguspost_nummer': Text(),
    'naam': Text(),
    'object': Text(),
    'kleur': Text(),
    'specificatie': Text(),
    'periode': Integer(),
    'nw_begroot': Float(),
    'nw_geboekt': Float(),
    'progr#': Integer(),
    'eenheid': Text()
}


mapping_rapportage_dtype = {
    'cataloguspost': Text(),
    'omschrijving': Text(),
    'rapportagepost': Text(),
    'kosten_baten': Text(),
}


def read_replace_excel_table(database, metadata, filename, tablename, sheet_number=0, dtype=None):
    sheet = pd.ExcelFile(filename)
    log.debug("Sheet names : {}".format(sheet.sheet_names))

    # Load a sheet into a DataFrame by name: df1
    df1 = sheet.parse(sheet.sheet_names[0])
    df1.rename(columns=lambda x: x.lower(), inplace=True)

    if tablename in metadata.tables:
        table = metadata.tables[tablename]
        table.drop(database)

    df1.to_sql(tablename, database, dtype=dtype)
    total_seconds = time.time() - start
    log.info("Imported {} {} items in {:.2f} seconds".format(len(df1.index), tablename, total_seconds))


planex_file = '{}dump-planex-20180620.xlsx'.format(DATA_DIR)
planex_name = 'planex'

read_replace_excel_table(db_engine, metadata, planex_file, planex_name, dtype=planex_dtype)

# Read in rapportage kosten & baten mappings from CSV file
start = time.time()
mapping_rapportage_file = '{}Mappingbestand rapportage kosten baten v2.csv'.format(DATA_DIR)
mapping_rapportage_name = 'mapping_rapportage'

log.debug("CSV file : {}".format(mapping_rapportage_file))
df = pd.read_csv(mapping_rapportage_file)
df.rename(columns=lambda x: x.lower(), inplace=True)

if mapping_rapportage_name in metadata.tables:
    table = metadata.tables[mapping_rapportage_name]
    table.drop(db_engine)

df.to_sql(mapping_rapportage_name, db_engine, dtype=mapping_rapportage_dtype)
total_seconds = time.time() - start
log.info("Imported {} {} items in {:.2f} seconds".format(len(df.index), mapping_rapportage_name, total_seconds))
