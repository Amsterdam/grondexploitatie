import re
import datetime
import logging
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.reverse import reverse
from django.http import JsonResponse
from django.db import connection

from rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_200_OK

log = logging.getLogger(__name__)


class ProjectList(APIView):
    def get(self, request, format=None):
        """
        Geef lijst van alle projecten waarvoor er baten zijn vanaf het 'start_jaar'
        Default is 'start_jaar' het huidige jaar
        """
        now = datetime.datetime.now()
        current_year = now.year
        if 'start_jaar' in request.query_params:
            start_jaar = request.query_params['start_jaar']
            if not re.match('^\d{4}$', start_jaar) or start_jaar < 1900 or start_jaar > current_year + 5:
                return Response(status=HTTP_400_BAD_REQUEST)
        else:
            start_jaar = current_year

        sql = f'''select g.plannr as project
        , g.plannaam as naam
from grex_grenzen_ogagis_2016 g
join planex p on g.plannr = p.plannr 
where p.kosten_baten = 'Baten'
and p.periode >= {start_jaar}
group by 1,2 order by 1,2    
'''
        results = []
        with connection.cursor() as cursor:
            cursor.execute(sql)
            for row in cursor.fetchall():
                (plannr, plannaam) = row
                href = reverse('project_detail', kwargs=dict(plannr=plannr), request=request)
                results.append({
                    'plannr': plannr,
                    'plannaam': plannaam,
                    '_links': {
                        'self': {
                            'href': href
                        }
                    }
                })

        data = {
             "count": len(results),
             "results": results,
        }

        return JsonResponse(data)

class ProjectDetail(APIView):
    """
    Toon details voor project met baten begroot per categorie vanaf 'start_jaar'
    Default is 'start_jaar' het huidige jaar

    Indien parameter 'use_period_groups' is meegegeven dan worden de bate niet
    alleen per categorie, maar ook per periode van vier jaar en het huidige jaar
    weergegeven
    """

    def get(self, request, plannr, format=None):
        if not re.match('^\d{5}$', plannr):
            return Response(status=HTTP_400_BAD_REQUEST)

        now = datetime.datetime.now()
        current_year = now.year
        if 'start_jaar' in request.query_params:
            start_jaar = request.query_params['start_jaar']
            if not re.match('^\d{4}$', start_jaar) or int(start_jaar) < 1900 or int(start_jaar) > current_year + 5:
                return Response(status=HTTP_400_BAD_REQUEST)
            start_jaar = int(start_jaar)
        else:
            start_jaar = current_year

        if 'use_period_groups' in request.query_params:
            use_period_groups = True
        else:
            use_period_groups = False

        sql = f'''select g.plannr as project
     , g.plannaam as naam
     , g.startdatum as startdatum
     , g.planstatus as status
     , p.begroting_naam as begroting
     , p.prijspeildatum as prijspeildatum
     , m.rapportagepost as categorie
     , p.periode as periode
     , sum(p.nw_begroot) as begroot
from grex_grenzen_ogagis_2016 g
join planex p on g.plannr = p.plannr 
join mapping_rapportage m on m.cataloguspost = cast(p.cataloguspost_nummer as double precision)
where p.kosten_baten = 'Baten'
  and p.periode >= {start_jaar}
  and g.plannr = {plannr}
group by  g.plannr, g,plannaam, g.startdatum, g.planstatus, p.begroting_naam, p.prijspeildatum, m.rapportagepost, p.periode order by 1, 2
    '''

        data = {}
        with connection.cursor() as cursor:
            cursor.execute(sql)
            for row in cursor.fetchall():
                (plannr, plannaam, startdatum, planstatus, begroting, prijspeildatum, categorie, periode, begroot) = row
                periode = int(periode)
                if 'plannr' not in data:
                    data.update({
                        'plannr': plannr,
                        'plannaam': plannaam,
                        'startdatum': startdatum,
                        'planstatus': planstatus,
                        'begroting': begroting,
                        'prijspeildatum': prijspeildatum,
                    })
                elif not (plannr == data['plannr']
                          and plannaam == data['plannaam']
                          and startdatum == data['startdatum']
                          and planstatus == data['planstatus']
                          and begroting == data['begroting']
                          and prijspeildatum == data['prijspeildatum']):
                    log.error("Wrong values in row {}".format(row))
                if use_period_groups:
                    # We will group in buckets of the current year and then in periods of four years
                    if periode == start_jaar:
                        bucket_name = str(periode)
                    else:
                        bucket = int((periode - (start_jaar + 1)) / 4)
                        start_bucket_jaar = (start_jaar + 1) + 4 * bucket
                        end_bucket_jaar = start_bucket_jaar + 3
                        bucket_name = str(start_bucket_jaar)+'-'+str(end_bucket_jaar)
                    if 'begroot' not in data:
                        data['begroot'] = dict()
                    if categorie not in data['begroot']:
                        data['begroot'][categorie] = dict()
                    if bucket_name not in data['begroot'][categorie]:
                        data['begroot'][categorie][bucket_name] = 0.0
                    data['begroot'][categorie][bucket_name] += begroot
                else:
                    if 'begroot' not in data:
                        data['begroot'] = dict()
                    if categorie not in data['begroot']:
                        data['begroot'][categorie] = 0.0
                    data['begroot'][categorie] += begroot

        return JsonResponse(data)