import json

from django.test import TestCase, Client, override_settings

from grondexploitatie.models import GrexGrenzenOgagis2016, MappingRapportage, Planex
from grondexploitatie.settings import MIDDLEWARE

# Allow for automatic creation of database tables
GrexGrenzenOgagis2016._meta.managed = True
MappingRapportage._meta.managed = True
Planex._meta.managed = True

# Do not test the authorization module here
no_auth = MIDDLEWARE[:]
no_auth.remove('authorization_django.authorization_middleware')
@override_settings(MIDDLEWARE = no_auth)
class TestContents(TestCase):

    def setUp(self):
        self.http_client = Client()

    def test_projects(self):
        # Test the projects call

        # Two exploitations for the same plannr should only reported once
        p = Planex(
            kosten_baten = 'Baten',
            periode = 2010,
            plannr = 12345,
        )
        p.save()

        p = Planex(
            kosten_baten = 'Baten',
            periode = 2011,
            plannr = 12345,
        )
        p.save()

        p = Planex(
            kosten_baten = 'Baten',
            periode = 2011,
            plannr = 12346,
        )
        p.save()

        # Only Baten should be reported
        p = Planex(
            kosten_baten = 'Kosten',
            periode = 2012,
            plannr = 12347,
        )
        p.save()

        for n in [12345, 12346, 12347]:
            g = GrexGrenzenOgagis2016(
                plannr = n,
                plannaam = 'testplan',
            )
            g.save()

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2010')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 2
        assert result["results"][0]["plannr"] == 12345

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2011')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 2

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2012')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 0

    def test_project(self):
        # Test a single project

        for periode in range(2000, 2011):
            for kosten_baten in ['Kosten', 'Baten']:    # Only Baten should be reported
                for plannr in [12345, 12346]:          # Only 12345 should be reported
                    for cataloguspost_nummer in ['1', '2']:  # Only 1 should be reported
                        p = Planex(
                            kosten_baten = kosten_baten,
                            periode = periode,
                            plannr = plannr,
                            cataloguspost_nummer = cataloguspost_nummer,
                            begroting_naam = 'Begroting',
                            prijspeildatum = '2015-01-01',
                            nw_begroot = 10,
                            fase = 'Fase'
                        )
                        p.save()

        for plannr in [12345, 12347]:   # Only 12345 matches
            g = GrexGrenzenOgagis2016(
                plannr = plannr,
                plannaam = 'Plan_{}'.format(plannr),
                startdatum = '2014-01-01',
                planstatus = 'A',

            )
            g.save()

        for cataloguspost in [0, 1]:    # Only 1 should match
            m = MappingRapportage(
                cataloguspost = cataloguspost,
                rapportagepost = 'Rapportage_{}'.format(cataloguspost)
            )
            m.save()

        # periods are 2000 - 2010, 2011 should return no results
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2011')
        assert response.status_code == 404

        # but 2010 should be OK
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2010')
        assert response.status_code == 200

        # return the full list
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2000&use_period_groups=false')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": {
                "Rapportage_1": "110"
            }
        }
        assert result == as_expected

        # and sort it on periods; first year and then intervals of 4 years
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2000&use_period_groups=true')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": {
                "Rapportage_1": [
                    {"start": "2000", "end": "2000", "begroot": "10"},
                    {"start": "2001", "end": "2004", "begroot": "40"},
                    {"start": "2005", "end": "2008", "begroot": "40"},
                    {"start": "2009", "end": "2012", "begroot": "20"}]
            }
        }
        assert result == as_expected

        # now for a part of the list
        # period_groups defaults to false
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2005')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": {
                "Rapportage_1": "60"
            }
        }
        assert result == as_expected

        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2005&use_period_groups=true')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": {
                "Rapportage_1": [
                    {"start": "2005", "end": "2005", "begroot": "10"},
                    {"start": "2006", "end": "2009", "begroot": "40"},
                    {"start": "2010", "end": "2013", "begroot": "10"}]
            }
        }
        assert result == as_expected
