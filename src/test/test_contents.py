import json

from django.test import TestCase, Client, override_settings

from grondexploitatie.models import GrexGrenzen, MappingRapportage, Planex
from grondexploitatie.settings import MIDDLEWARE

# Do not test the authorization module here
# Of course you can also implement test tokens but this would simply test the authorization module (again)
# In the basic tests the API endpoints are tested to return unauthorized responses
# In the other modules the authorization is simply disabled
no_auth = MIDDLEWARE[:]
no_auth.remove('authorization_django.authorization_middleware')


@override_settings(MIDDLEWARE=no_auth)
class TestContents(TestCase):

    def setUp(self):
        self.http_client = Client()

    def test_projects(self):
        # Test the projects call

        # Two exploitations for the same plannr should only reported once
        p = Planex(
            kosten_baten='Baten',
            periode=2010,
            plannr=12345,
        )
        p.save()

        p = Planex(
            kosten_baten='Baten',
            periode=2011,
            plannr=12345,
        )
        p.save()

        p = Planex(
            kosten_baten='Baten',
            periode=2011,
            plannr=12346,
        )
        p.save()

        # Only Baten should be reported
        p = Planex(
            kosten_baten='Kosten',
            periode=2012,
            plannr=12347,
        )
        p.save()

        for n in [12345, 12346, 12347]:
            g = GrexGrenzen(
                plannr=n,
                plannaam='testplan',
            )
            g.save()

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2010')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 2
        assert result["results"][0]["plannr"] == 12345

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2011')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 2

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2012')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 0

    def test_project(self): # noqa C901
        # Test a single project

        for periode in range(2000, 2011):
            for kosten_baten in ['Kosten', 'Baten']:         # Only Baten should be reported
                for plannr in [12345, 12346]:                # Only 12345 should be reported
                    for cataloguspost_nummer in ['1', '2']:  # Only 1 should be reported
                        p = Planex(
                            kosten_baten=kosten_baten,
                            periode=periode,
                            plannr=plannr,
                            cataloguspost_nummer=cataloguspost_nummer,
                            begroting_naam='Begroting',
                            prijspeildatum='2015-01-01',
                            nw_begroot=10,
                            nw_geboekt=10,
                            fase='Fase'
                        )
                        p.save()

        for plannr in [12345, 12347, 12348]:   # Only 12345 matches
            g = GrexGrenzen(
                plannr=plannr,
                plannaam='Plan_{}'.format(plannr),
                wkb_geometry='POINT(1 2)',
                startdatum='2014-01-01',
                planstatus='A',

            )
            g.save()

        for cataloguspost in [0, 1]:    # Only 1 should match
            m = MappingRapportage(
                cataloguspost=cataloguspost,
                rapportagepost='Rapportage_{}'.format(cataloguspost)
            )
            m.save()

        # periods are 2000 - 2010, 2011 should return no results
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2011')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "_display": "Plan_12345",
            "startjaar": 2011,
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            'geometrie': {
                'type': 'Point',
                'coordinates': [1, 2]
            },
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": [{
                'categorie': "Rapportage_1",
                'jaren':[],
                'totaal':{
                    'begroot': 110,
                    'geboekt': 110,
                    'start': '2000',
                    'huidig': '2011',
                    'end': '2011'
                }
            }],
        }
        assert result == as_expected

        # but 2010 should be OK
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2010')
        assert response.status_code == 200

        # return full list and total
        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2000')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "_display": "Plan_12345",
            "startjaar": 2000,
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            'geometrie': {
                'type': 'Point',
                'coordinates': [1, 2]
            },
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": [
                {
                    'categorie' : "Rapportage_1",
                    'jaren' : [
                        {"start": "2000", "end": "2000", "begroot": 10},
                        {"start": "2001", "end": "2004", "begroot": 40},
                        {"start": "2005", "end": "2008", "begroot": 40},
                        {"start": "2009", "end": "2012", "begroot": 20}
                    ],
                    'totaal': {
                        "begroot": 110,
                        "geboekt": 0,
                        "end": "2010",
                        "huidig": "2000",
                        "start": "2000"
                    }
                }
            ]
        }
        assert result == as_expected

        response = self.http_client.get('/grondexploitatie/project/12345/?start_jaar=2005')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "_display": "Plan_12345",
            "startjaar": 2005,
            "plannr": 12345,
            "plannaam": "Plan_12345",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            'geometrie': {
                'type': 'Point',
                'coordinates': [1, 2]
            },
            "begroting": "Begroting",
            "prijspeildatum": "2015-01-01",
            "fase": "Fase",
            "begroot": [
                {
                    'categorie': "Rapportage_1",
                    'jaren': [
                        {"start": "2005", "end": "2005", "begroot": 10},
                        {"start": "2006", "end": "2009", "begroot": 40},
                        {"start": "2010", "end": "2013", "begroot": 10}
                    ],
                    'totaal': {
                        "begroot": 110,
                        "geboekt": 50,
                        "start": "2000",
                        "huidig": "2005",
                        "end": "2010"
                    }
                }
            ]
        }
        assert result == as_expected

        response = self.http_client.get('/grondexploitatie/project/12348/?start_jaar=2005')
        assert response.status_code == 200
        result = json.loads(response.content)
        as_expected = {
            "_display": "Plan_12348",
            "startjaar": 2005,
            "plannr": 12348,
            "plannaam": "Plan_12348",
            "startdatum": "2014-01-01",
            "planstatus": "A",
            'geometrie': {
                'type': 'Point',
                'coordinates': [1, 2]
            },
            "begroting": None,
            "prijspeildatum": None,
            "fase": None,
            "begroot": None
        }
        assert result == as_expected
