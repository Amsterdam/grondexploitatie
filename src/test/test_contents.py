# import datetime
# import re
import json

from django.test import TestCase, Client, override_settings

from grondexploitatie.models import GrexGrenzenOgagis2016, MappingRapportage, Planex
from grondexploitatie.settings import MIDDLEWARE

# Allow for automatic creation of database tables
GrexGrenzenOgagis2016._meta.managed = True
MappingRapportage._meta.managed = True
Planex._meta.managed = True

# Do not test the authorization module
no_auth = MIDDLEWARE[:]
no_auth.remove('authorization_django.authorization_middleware')
@override_settings(MIDDLEWARE = no_auth)
class TestContents(TestCase):

    def setUp(self):
        self.http_client = Client()

    def test_init(self):
        p = Planex(
            kosten_baten = 'Baten',
            periode = 2010,
            plannr = 12345,
        )
        p.save()

        p = Planex(
            kosten_baten = 'Baten',
            periode = 2011,
            plannr = 12346,
        )
        p.save()

        # Only Baten should be reported
        p = Planex(
            kosten_baten = 'Kosten',
            periode = 2012,
            plannr = 12347,
        )
        p.save()

        for n in [12345, 12346, 12347]:
            g = GrexGrenzenOgagis2016(
                plannr = n,
                plannaam = 'testplan',
            )
            g.save()

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2010')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 2
        assert result["results"][0]["plannr"] == 12345

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2011')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 1

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2012')
        assert response.status_code == 200
        result = json.loads(response.content)
        assert result["count"] == 0
