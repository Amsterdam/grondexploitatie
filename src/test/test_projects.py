import datetime

import re
from django.test import TestCase, Client, override_settings
import json

from grondexploitatie.models import GrexGrenzenOgagis2016, MappingRapportage, Planex
from grondexploitatie.settings import MIDDLEWARE

# Allow for automatic creation of database tables
GrexGrenzenOgagis2016._meta.managed = True
MappingRapportage._meta.managed = True
Planex._meta.managed = True

# Do not test the authorization module
no_auth = MIDDLEWARE[:]
no_auth.remove('authorization_django.authorization_middleware')
@override_settings(MIDDLEWARE = no_auth)
class TestProjects(TestCase):

    def setUp(self):
        self.http_client = Client()

    def test_empty_projects(self):
        response = self.http_client.get('/grondexploitatie/projects/')
        assert response.status_code == 200
        assert json.loads(response.content) == {
            "count": 0,
            "results": []
        }

    def test_projects_parameters(self):
        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=2000')
        assert response.status_code == 200
        assert json.loads(response.content) == {
            "count": 0,
            "results": []
        }

        # start_jaar should be within 1900 - current year + 5
        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=1900')
        assert response.status_code == 200

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=1899')
        assert response.status_code == 400  # Bad Request

        now = datetime.datetime.now()
        current_year = now.year

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=' + str(current_year + 5))
        assert response.status_code == 200

        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=' + str(current_year + 6))
        assert response.status_code == 400  # Bad Request

        # start_jaar should be numeric
        response = self.http_client.get('/grondexploitatie/projects/?start_jaar=aap')
        assert response.status_code == 400  # Bad Request

    def test_unknown_project(self):
        response = self.http_client.get('/grondexploitatie/project/00000/')
        assert response.status_code == 404  # not found
        assert response.content == b""

    def test_project_parameters(self):
        # Only 5-digit plannr's are allowed
        response = self.http_client.get('/grondexploitatie/project/aap/')
        assert re.match('.*The requested URL .* was not found', str(response.content))

        response = self.http_client.get('/grondexploitatie/project/0000/')
        assert re.match('.*The requested URL .* was not found', str(response.content))

        response = self.http_client.get('/grondexploitatie/project/000000/')
        assert re.match('.*The requested URL .* was not found', str(response.content))

        # it should accept a start jaar (1900 - now + 5 jaar)
        now = datetime.datetime.now()
        current_year = now.year

        response = self.http_client.get('/grondexploitatie/project/00000/?start_jaar=2000')
        assert response.status_code == 404  # not found
        assert response.content == b""

        response = self.http_client.get('/grondexploitatie/project/00000/?start_jaar=1900')
        assert response.status_code == 404  # not found
        assert response.content == b""

        response = self.http_client.get('/grondexploitatie/project/00000/?start_jaar=1899')
        assert response.status_code == 400  # Bad Request
        assert response.content == b""

        response = self.http_client.get('/grondexploitatie/project/00000/?start_jaar=' + str(current_year + 5))
        assert response.status_code == 404  # not found
        assert response.content == b""

        response = self.http_client.get('/grondexploitatie/project/00000/?start_jaar=' + str(current_year + 6))
        assert response.status_code == 400  # Bad Request
        assert response.content == b""
